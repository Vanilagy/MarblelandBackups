//--------------------------------------------------------------------------
// Level Generator lawl, written by Connie
//
//                      ✧･ﾟ  ╱|、
//                          (˚ˎ 。7  
//                          |、˜〵          
//                          じしˍ,)ノ
//--------------------------------------------------------------------------
// This code has been released under the CC-by 4.0 License.
// Read the following link:
// http://creativecommons.org/licenses/by/4.0/
//--------------------------------------------------------------------------


datablock TriggerData(GoodLevelGeneratorTrigger) {
	tickPeriodMS = 100;
};

function GoodLevelGeneratorTrigger::onAdd(%this,%trigger,%obj) {
   %trigger.alreadydidrot = 0;

   if(isObject(%trigger.startPad)) {
      %trigger.startPad.getId().delete();
      %trigger.startpadPlat.getID().delete();
   }

   if(isObject(%trigger.endPad)) {
      %trigger.endPad.getId().delete();
      %trigger.endpadPlat.getID().delete();
      %trigger.endpadsign.getID().delete();
   }

   if(isObject(%trigger.eggmis)) {
      %trigger.eggmis.getID().delete();
   }

   %trigger.startPad = new StaticShape(StartPoint) {
      position = "0 0 0";
      rotation = "1 0 0 0";
      scale = "1 1 1";
      datablock = "StartPad";
   };

   %trigger.startPadPlat = new InteriorInstance() {
      position = "0 0 -0.35";
      rotation = "1 0 0 0";
      scale = "1 1 1";
      interiorFile = "~/data/interiors_mbg/addon/smallplatform.dif";
   };

   %trigger.platstogenerate = getRandom(1, 1100);
   //5 distance

   for (%i = 1; %i < %trigger.platstogenerate + 1; %i++) {
      %rotation = getRandom(1, 100);

      if (%rotation <= 25) {
         %rottodo = 0;
         %trigger.distancetoaddy = 5;
         %trigger.distancetoaddx = 0;
      } else if (%rotation <= 50) {
         %rottodo = 90;
         %trigger.distancetoaddy = 0;
         %trigger.distancetoaddx = 5;
      } else if (%rotation <= 75) {
         %rottodo = 180;
         %trigger.distancetoaddy = -5;
         %trigger.distancetoaddx = 0;
      } else if (%rotation <= 100) {
         %rottodo = -90;
         %trigger.distancetoaddy = 0;
         %trigger.distancetoaddx = -5;
      }

      if (%trigger.alreadydidrot == "" || %trigger.alreadydidrot == 0) {
         %trigger.startPad.rotation = "0 0 1" SPC %rottodo;
         %trigger.alreadydidrot = 1;
      }

      %trigger.finalpositionx += %trigger.distancetoaddx;
      %trigger.finalpositiony += %trigger.distancetoaddy;
      %trigger.finalpositionzdec = getRandom(1, 3);

      switch(%trigger.finalpositionzdec) {
         case 1:
         %trigger.finalpositionz = -0.5;
         case 2:
         %trigger.finalpositionz = 0;
         case 3:
         %trigger.finalpositionz = 0.5;
      }

      %trigger.positiontodo[%i] = %trigger.finalpositionx SPC %trigger.finalpositiony SPC (-0.35 + %trigger.finalpositionz);
      %trigger.gempostodo[%i] = %trigger.finalpositionx SPC %trigger.finalpositiony SPC (0 + %trigger.finalpositionz);

      %trigger.shouldgenerategemPU = getRandom(1, 100);

      if (%trigger.shouldgenerategemPU <= 25) {
         %trigger.shouldgenerategemPU = 1;
      } else {
         %trigger.shouldgenerategemPU = 0;
      }

      if (%i == %trigger.platstogenerate) {
         %trigger.endpadPlat = new InteriorInstance() {
            position = %trigger.positiontodo[%i];
            rotation = "1 0 0 0";
            scale = "1 1 1";
            interiorFile = "~/data/interiors_mbg/addon/smallplatform.dif";
         };

         %trigger.endpadsign = new StaticShape() {
            position =  %trigger.finalpositionx SPC %trigger.finalpositiony SPC "7";
            rotation = "0 0 1" SPC getRandom(0, 359);
            scale = "1 1 1";
            datablock = "SignFinish";
         };

         %trigger.endPad = new StaticShape(EndPoint) {
            position = %trigger.finalpositionx SPC %trigger.finalpositiony SPC (0 + %trigger.finalpositionz);
            rotation = "0 0 1" SPC %rottodo;
            scale = "1 1 1";
            datablock = "EndPad";
         };

         for (%j = 1; %j < %i + 1; %j++) {
            if (%j == %i) {
               echo("Same Gems cannot be checked");
            } else {
               %gposixa = getword(%trigger.positiontodo[%i], 0);
               %gposiya = getword(%trigger.positiontodo[%i], 1);

               %gposjxa = getword(%trigger.gempostodo[%j], 0);
               %gposjya = getword(%trigger.gempostodo[%j], 1);

               if (%gposixa == %gposjxa && %gposiya == %gposjya) {
                  %trigger.platformgem[%j].getID().delete();
               } else {
                  echo("Gems aren't in the same position");
               }
            }
         }

         for (%j = 1; %j < %i + 1; %j++) {
            if (%j == %i) {
               echo("Same");
            } else {
               %gposixb = getword(%trigger.positiontodo[%j], 0);
               %gposiyb = getword(%trigger.positiontodo[%j], 1);

               %gposjxb = getword(%trigger.endpadPlat.position, 0);
               %gposjyb = getword(%trigger.endpadPlat.position, 1);

               if (%gposixb == %gposjxb && %gposiyb == %gposjyb) {
                  %trigger.platform[%j].getID().delete();
               } else {
                  echo("!same position");
               }
            }
         }

         for (%j = 1; %j < %i + 1; %j++) {
            if (%j == %i) {
               echo("Same");
            } else {
               %gposixc = getword(%trigger.positiontodo[%j], 0);
               %gposiyc = getword(%trigger.positiontodo[%j], 1);

               %gposjxc = getword(%trigger.startpadPlat.position, 0);
               %gposjyc = getword(%trigger.startpadPlat.position, 1);

               if (%gposixc == %gposjxc && %gposiyc == %gposjyc) {
                  %trigger.platform[%j].getID().delete();
               } else {
                  echo("!same position");
               }
            }
         }
      } else {
         %trigger.platform[%i] = new InteriorInstance() {
            position = %trigger.positiontodo[%i];
            rotation = "1 0 0 0";
            scale = "1 1 1";
            interiorFile = "~/data/interiors_mbg/addon/smallplatform.dif";
         };

         MissionGroup.add(%trigger.platform[%i]);

         %easterggchance = getRandom(1, 100);

         if (%easterggchance >= 90 && !isObject(%trigger.eggmis) && %trigger.finalpositionz != 0.5) {
            %trigger.eggmis = new Item(EasterEgg) {
               position = %trigger.finalpositionx SPC %trigger.finalpositiony SPC (getWord(%trigger.positiontodo[%i], 2) - 1.5);
               rotation = "1 0 0 0";
               scale = "1 1 1";
               collideable = "0";
               static = "1";
               rotate = "1";   
               datablock = "EasterEgg";    
            }; 
         }

         MissionGroup.add(%trigger.eggmis);

         if (%trigger.shouldgenerategemPU == 1 && getWord(%trigger.platform[%i].position, 0) != getWord(%trigger.gempostodo[%i].position, 0) && getWord(%trigger.platform[%i].position, 1) != getWord(%trigger.gempostodo[%i].position, 1)) {
            %whichPUtoGen = getRandom(1, 7);
            switch (%whichPUtoGen) {
               case 1:
               %PUdatablock = "GemItemRed";
               %PUScale = "1 1 1";
               case 2:
               %PUdatablock = "SuperSpeedItem";
               %trigger.gempostodo[%i] = %trigger.finalpositionx SPC %trigger.finalpositiony SPC (0.2 + %trigger.finalpositionz);
               %PUScale = "1 1 1";
               case 3:
               %PUdatablock = "TimeTravelItem";
               %PUtimebonus = mRound(getRandom(1000, 5000) / 1000) * 1000;
               %trigger.gempostodo[%i] = %trigger.finalpositionx SPC %trigger.finalpositiony SPC (0.5 + %trigger.finalpositionz);
               %PUScale = "1 1 1";
               case 4:
               %PUdatablock = "HelicopterItem";
               %trigger.gempostodo[%i] = %trigger.finalpositionx SPC %trigger.finalpositiony SPC (-0.2 + %trigger.finalpositionz);
               %PUScale = "1 1 1";
               case 5:
               %PUdatablock = "SuperJumpItem";
               %trigger.gempostodo[%i] = %trigger.finalpositionx SPC %trigger.finalpositiony SPC (0.2 + %trigger.finalpositionz);
               %PUScale = "1 1 1";
               case 6:
               %PUdatablock = "Hazard";
               %trigger.gempostodo[%i] = %trigger.finalpositionx SPC %trigger.finalpositiony SPC (-0.05 + %trigger.finalpositionz);
               %PUScale = "1 1 1";
               case 7:
               if (%trigger.bigttgot == "") {
                  %PUdatablock = "TimeTravelItem";
                  %PUtimebonus = mRound(getRandom(10000, 20000) / 1000) * 1000;
                  %trigger.gempostodo[%i] = %trigger.finalpositionx SPC %trigger.finalpositiony SPC (1 + %trigger.finalpositionz);
                  %trigger.bigttgot = 1;
                  %PUScale = "2 2 2";
               } else {
                  %PUdatablock = "GemItemRed";
                  %PUScale = "1 1 1";  
               }
               default:
               %PUdatablock = "GemItemRed";
               %PUScale = "1 1 1";
            }

            if (%PUdatablock $= "Hazard") {
               %hazardtoplace = getRandom(1,2);

               switch(%hazardtoplace) {
                  case 1:
                  %trigger.platformgem[%i] = new StaticShape() {
                     position = %trigger.gempostodo[%i];
                     rotation = "1 0 0 0";
                     scale = "1 1 1";
                     datablock = "Tornado";    
                  };
                  case 2:
                  %trigger.platformgem[%i] = new StaticShape() {
                     position = %trigger.finalpositionx SPC %trigger.finalpositiony SPC (%trigger.finalpositionz - 0.9);
                     rotation = "0 0 1" SPC getRandom(0, 359);
                     scale = "4 4 4";
                     datablock = "Magnet";    
                  };
               }
            } else {
               %trigger.platformgem[%i] = new Item() {
                  position = %trigger.gempostodo[%i];
                  rotation = "1 0 0 0";
                  scale = %PUScale;
                  datablock = %PUdatablock;    
                  collideable = "0";
                  static = "1";
                  rotate = "1";   
                  timebonus = %PUtimebonus;       
               };
            }

            MissionGroup.add(%trigger.platformgem[%i]);
         }
      }

      for (%j = 1; %j < %i + 1; %j++) {
         if (%j == %i) {
            echo("Same Platforms cannot be checked");
         } else {
            %posix = getword(%trigger.positiontodo[%i], 0);
            %posiy = getword(%trigger.positiontodo[%i], 1);
            %posiz = getword(%trigger.positiontodo[%i], 2);

            %posjx = getword(%trigger.positiontodo[%j], 0);
            %posjy = getword(%trigger.positiontodo[%j], 1);
            %posjz = getword(%trigger.positiontodo[%j], 2);

            if (%posix == %posjx && %posiy == %posjy) {
               %trigger.platform[%i].getID().delete();
            } else {
               echo("Platforms aren't in the same position");
            }
         }

         if (%trigger.shouldgenerategemPU == 1) {
            if (%j == %i) {
               echo("Same Gems cannot be checked");
            } else {
               %gposix = getword(%trigger.gempostodo[%i], 0);
               %gposiy = getword(%trigger.gempostodo[%i], 1);
               %gposiz = getword(%trigger.gempostodo[%i], 2);

               %gposjx = getword(%trigger.gempostodo[%j], 0);
               %gposjy = getword(%trigger.gempostodo[%j], 1);
               %gposjz = getword(%trigger.gempostodo[%j], 2);

               if (%gposix == %gposjx && %gposiy == %gposjy) {
                  %trigger.platformgem[%i].getID().delete();
               } else {
                  echo("Gems aren't in the same position");
               }
            }
         }
      }
   }

   if (%trigger.platstogenerate <= 200) {
      %trigger.skytouse = "~/data/skies/Beginner/Beginner_Sky.dml";
      missionInfo.startHelpText = "Estimated Mission Difficulty: Beginner\nYou shouldn't encounter any difficulties.\nEaster Egg? " @ isObject(EasterEgg) @ "."; 
   } else if (%trigger.platstogenerate <= 500) {
      %trigger.skytouse = "~/data/skies/Intermediate/Intermediate_Sky.dml";
      missionInfo.startHelpText = "Estimated Mission Difficulty: Intermediate\nIt might be a bit more tough than usual\nEaster Egg? " @ isObject(EasterEgg) @ "."; 
   } else if (%trigger.platstogenerate <= 700) {
      %trigger.skytouse = "~/data/skies/Advanced/Advanced_Sky.dml";
      missionInfo.startHelpText = "Estimated Mission Difficulty: Advanced\nSlow and steady gets the job done\nEaster Egg? " @ isObject(EasterEgg) @ "."; 
   } else if (%trigger.platstogenerate < 1100) {
      %trigger.skytouse = "~/data/skies/Expert/Expert_Sky.dml";
      missionInfo.startHelpText = "Estimated Mission Difficulty: Expert\nCarefulness is key\nEaster Egg? " @ isObject(EasterEgg) @ "."; 
   } else if (%trigger.platstogenerate == 1100) {
      %trigger.skytouse = "~/data/skies/Expert/Expert_Sky.dml";
      missionInfo.startHelpText = "Estimated Mission Difficulty: Expert+\nYou rolled the absolute biggest number you can. Don't ask, just have fun!\nEaster Egg? " @ isObject(EasterEgg) @ ".";      
   }

	new Sky(Sky) {
      position = "336 136 0";
      rotation = "1 0 0 0";
      scale = "1 1 1";
      cloudHeightPer[0] = "0";
      cloudHeightPer[1] = "0";
      cloudHeightPer[2] = "0";
      cloudSpeed1 = "0.0001";
      cloudSpeed2 = "0.0002";
      cloudSpeed3 = "0.0003";
      visibleDistance = "500";
      useSkyTextures = "1";
      renderBottomTexture = "1";
      SkySolidColor = "0.600000 0.600000 0.600000 1.000000";
      fogDistance = "300";
      fogColor = "0.600000 0.600000 0.600000 1.000000";
      fogVolume1 = "-1 7.45949e-031 1.3684e-038";
      fogVolume2 = "-1 1.07208e-014 8.756e-014";
      fogVolume3 = "-1 5.1012e-010 2.05098e-008";
      materialList = %trigger.skytouse;
      windVelocity = "1 0 0";
      windEffectPrecipitation = "0";
      noRenderBans = "1";
      fogVolumeColor1 = "128.000000 128.000000 128.000000 0.000000";
      fogVolumeColor2 = "128.000000 128.000000 128.000000 0.000004";
      fogVolumeColor3 = "128.000000 128.000000 128.000000 14435505.000000";
	};

   MissionGroup.add(Sky);

   if (%trigger.skytouse $= "~/data/skies/Expert/Expert_Sky.dml") { //Add the Sun. ~Connie
      new Sun(Sun) {
         direction = "0.638261 0.459006 -0.61801";
         color = "0.700000 0.700000 0.700000 1.000000";
         ambient = "0.100000 0.100000 0.200000 1.000000";
      };
      MissionGroup.add(Sun);
      Sun.inspectPostApply();
   } else {
      new Sun(Sun) {
         direction = "0.638261 0.459006 -0.61801";
         color = "1.400000 1.200000 0.400000 1.000000";
         ambient = "0.300000 0.300000 0.400000 1.000000";
      };
      MissionGroup.add(Sun);
      Sun.inspectPostApply();     
   }

   //Code taken from the GenerateWorldBox() function because it wouldn't work otherwise. ~Connie
   $InstantGroup = MissionCleanup;
   %box = MissionGroup.getWorldBox();
   %box = VectorSub(BoxMin(%box), "15 15 5") SPC VectorAdd(BoxMax(%box), "15 15 50");
   $InstantGroup = MissionGroup;

   new Trigger(Bounds) {
      position = "0 0 0";
      scale = "1 1 1";
      rotation = "1 0 0 0";
      dataBlock = "InBoundsTrigger";
      polyhedron = "0.0000000 0.0000000 0.0000000 1.0000000 0.0000000 0.0000000 0.0000000 1.0000000 0.0000000 0.0000000 0.0000000 1.0000000";
   };
   Bounds.setBounds(%box);
   MissionGroup.add(Bounds);

   %boundsposx = getWord(Bounds.position, 0);
   %boundsposy = getWord(Bounds.position, 1);
   %boundsposz = getWord(Bounds.position, 2);

   %boundsscaex = getWord(Bounds.scale, 0);
   %boundsscaley = getWord(Bounds.scale, 1);
   %boundsscalez = getWord(Bounds.scale, 2);

   %boundspos[1] = %boundsposx SPC %boundsposy SPC %boundsposz;
   %boundspos[2] = (%boundsposx + %boundsscaex) SPC %boundsposy SPC %boundsposz;
   %boundspos[3] = (%boundsposx + %boundsscaex) SPC (%boundsposy + %boundsscaley) SPC %boundsposz;
   %boundspos[4] = %boundsposx SPC (%boundsposy + %boundsscaley) SPC %boundsposz;

   %boundspos[5] = (%boundsposx + (%boundsscaex / 2)) SPC %boundsposy + %boundsscaley SPC %boundsposz;
   %boundspos[6] = (%boundsposx + (%boundsscaex / 2)) SPC %boundsposy SPC %boundsposz;
   %boundspos[7] = %boundsposx SPC (%boundsposy + (%boundsscaley / 2)) SPC %boundsposz;
   %boundspos[8] = %boundsposx + %boundsscaex SPC (%boundsposy + (%boundsscaley / 2)) SPC %boundsposz;

   for (%h = 1; %h < 9; %h++) {
       %trigger.pillar[%h] = new InteriorInstance() {
         position = %boundspos[%h];
         rotation = "1 0 0 0";
         scale = "2 2 125";
         interiorFile = "~/data/interiors_mbg/addon/smallplatform.dif";
      };      
   }
}


//--- OBJECT WRITE BEGIN ---
new SimGroup(MissionGroup) {
   new ScriptObject(MissionInfo) {
         artist = "Connie";
         desc = "This thing will generate a new, basic level every time you select it.\nDISCLAIMER: Keep in mind the fact that your FPS might take a deep dive if the level is too big.\nDISCLAIMER 2: If you record this level, your .rrec will only work properly as long as you play it while you have the level selected with the same generation.";
         game = "Platinum";
         level = "1000";
         name = "Shattered Islands: Level Generator";
   };
   new Trigger() {
      position = "0 0 0";
      rotation = "1 0 0 0";
      scale = "0 0 0";
      dataBlock = "GoodLevelGeneratorTrigger";
      polyhedron = "0.0000000 0.0000000 0.0000000 1.0000000 0.0000000 0.0000000 0.0000000 -1.0000000 0.0000000 0.0000000 0.0000000 1.0000000";
   };
};
//--- OBJECT WRITE END ---
