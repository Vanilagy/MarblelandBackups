// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// ~~~~~~~~~~ PARTICLES ~~~~~~~~~~
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

datablock ParticleData(OwParticle)
{
   textureName = "./Ow";
   dragCoeffiecient = 1;
   gravityCoefficient = 0;
   windCoefficient = 0;
   inheritedVelFactor = 0;
   constantAcceleration = -0.3;
   lifetimeMS = 1000;
   lifetimeVarianceMS = 100;
   useInvAlpha = true;
   spinSpeed = 10;
   spinRandomMin = -10;
   spinRandomMax = 10;

   colors[0] = "0.9 0.9 0.0 1.0";
   colors[1] = "0.9 0.9 0.0 1.0";
   colors[2] = "0.9 0.0 0.0 0.0";

   sizes[0] = 0.5;
   sizes[1] = 0.5;
   sizes[2] = 0.5;

   times[0] = 0;
   times[1] = 0.5;
   times[2] = 1.0;
};

datablock ParticleEmitterData(OwEmitter)
{
   ejectionPeriodMS = 20;
   periodVarianceMS = 0;
   ejectionVelocity = 2.0;
   velocityVariance = 0.25;
   ejectionOffset   = 0.75;
   //phiReferenceVel  = 0;
   //phiVariance      = 360;
   //orientParticles  = false;
   thetaMin = 0;
   thetaMax = 180;
   lifetimeMS = 50;
   particles = "OwParticle";
};

function startOwParticles(%location) {
	// Create the cleanup group.
	if (!isObject(OwParticles)) {
		new SimGroup(OwParticles);
		MissionCleanup.add(OwParticles);
	}
	// Create a ParticleNode to run the emitter.
	%position = %location.getPosition();
	//%rotation = %location.rotation;
	%obj = new ParticleEmitterNode(){
		datablock = FireWorkNode;
		emitter = OwEmitter;
		position = %position;
		//rotation = %rotation;
	};
	OwParticles.add(%obj);
}


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// ~~~~~~~~~~ TRIGGERS ~~~~~~~~~~
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Target player:
// ClientGroup.getObject(%index).player

//  Seamless motion trigger from the Sandbox PowerPack for MBPU by HiGuy
// Dynamic field: offset
// Type in the relative position to teleport the marble to in X Y Z.
datablock TriggerData(SeamlessMotionTrigger) {
	tickPeriodMS = 100;
};
function SeamlessMotionTrigger::onEnterTrigger(%this, %trigger, %obj) {
	%obj.noPickup = true;
	commandToClient(%obj.client, 'MarbleTeleport', %trigger.offset);
	%obj.schedule((%obj.client.getPing() * 2) + 100, "setFieldValue", "noPickup", false);
}

// Since I have almost no experience with C++, let's just make a trigger for removing objects.
// Dynamic fields: objectName1, objectName2, objectName3
// Type in the name of the object to be deleted.
// For example, typing FireWorks will delete any fire work emitters, and objects with that name.
// Only one name works at a time for a single variable.
datablock TriggerData(ClearTrigger) {
	tickPeriodMS = 100;
};
function ClearTrigger::onEnterTrigger(%this,%trigger,%obj) {
	// Do this if triggered.
	if (isObject(%trigger.objectName1))
		%trigger.objectName1.delete();
	if (isObject(%trigger.objectName2))
		%trigger.objectName2.delete();
	if (isObject(%trigger.objectName3))
		%trigger.objectName3.delete();
}

// FIREWORKS FTW!!!
datablock AudioProfile(ShortFireworks)
{
   filename    = "./ShortFireworkBlasts.wav";
   description = AudioDefault3d;
   preload = true;
};
datablock TriggerData(FireworksTrigger) {
	tickPeriodMS = 100;
};
function FireworksTrigger::onEnterTrigger(%this,%trigger,%obj) {
	// Do this if triggered.
	startFireWorks(ClientGroup.getObject(%index).player);
	serverplay2d(ShortFireworks);
}

// Another fireworks trigger, but this time allows customPosition and customRotation dynamic fields.
function startFireWorksCustom(%position, %rotation)
{
   // Create the cleanup group.
   if (!isObject(FireWorks)) {
      new SimGroup(FireWorks);
      MissionCleanup.add(FireWorks);
   }

   // Create a ParticleNode to run the emitter.
   %obj = new ParticleEmitterNode(){
      datablock = FireWorkNode;
      emitter = FireWorkSmokeEmitter;
      position = %position;
	  rotation = %rotation;
   };
   FireWorks.add(%obj);
   
   // Create the explosions.
   $Game::FireWorkSchedule = schedule(0,0,"launchWave",0,%position, %rotation);
}
datablock TriggerData(PointFireworksTrigger) {
	tickPeriodMS = 100;
};
function PointFireworksTrigger::onEnterTrigger(%this,%trigger,%obj) {
	// Do this if triggered.
	startFireWorksCustom(%trigger.customPosition, %trigger.customRotation);
	serverplay2d(ShortFireworks);
}

// Ow!
datablock TriggerData(OwTrigger) {
	tickPeriodMS = 50;
};
function OwTrigger::onEnterTrigger(%this,%trigger,%obj) {
	// Do this if triggered.
	startOwParticles(ClientGroup.getObject(%index).player);
}


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// ~~~~~~~~~~ TEXTURES ~~~~~~~~~~
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

new MaterialProperty(WWSand) {
	friction = 1.8;
	restitution = 0;
};
new MaterialProperty(WWTree) {
	friction = 1.2;
	restitution = 0.7;
};
new MaterialProperty(WWSnow) {
	friction = 0.7;
	restitution = 0.4;
};
new MaterialProperty(WWBump) {
	friction = 1;
	restitution = 0;
	force = 11;
};
new MaterialProperty(WWRebound) {
	friction = 1;
	restitution = 2;
};
new MaterialProperty(WWGlue) {
	restitution = -10;
	friction = 10;
	force = -10;
};
new MaterialProperty(WWCrash) {
	restitution = -10000;
	friction = -10000;
	force = 10000;
};

addMaterialMapping("PG-Sand", WWSand);
addMaterialMapping("PG-Sand-Dark", WWSand);
addMaterialMapping("PG-Sand-Light", WWSand);
addMaterialMapping("PG-PalmTreeBlue", WWTree);
addMaterialMapping("PG-PalmTreeBrown", WWTree);
addMaterialMapping("friction_bump", WWBump);
addMaterialMapping("Floor-Rebound", WWRebound);
addMaterialMapping("snow2", WWSnow);
addMaterialMapping("CrashTexture", WWCrash);
//--- OBJECT WRITE BEGIN ---
new SimGroup(MissionGroup) {

   new ScriptObject(MissionInfo) {
         name = "Crashing Course";
         ultimateTime = "30000";
         level = "7";
         type = "Custom";
         music = "Halloween Trance.ogg";
         desc = "\'Out Of Bounds\' is now much more meaningful.\nAre you up for the long intervals of failure?";
         artist = "WeatherWonders";
         goldTime = "35000";
   };
   new MissionArea(MissionArea) {
      area = "-360 -648 720 1296";
      flightCeiling = "300";
      flightCeilingRange = "20";
         locked = "true";
   };
   new Sky(Sky) {
      position = "336 136 0";
      rotation = "1 0 0 0";
      scale = "1 1 1";
      cloudHeightPer[0] = "0";
      cloudHeightPer[1] = "0";
      cloudHeightPer[2] = "0";
      cloudSpeed1 = "0.0001";
      cloudSpeed2 = "0.0002";
      cloudSpeed3 = "0.0003";
      visibleDistance = "500";
      useSkyTextures = "1";
      renderBottomTexture = "1";
      SkySolidColor = "0.600000 0.600000 0.600000 1.000000";
      fogDistance = "300";
      fogColor = "0.600000 0.600000 0.600000 1.000000";
      fogVolume1 = "-1 7.45949e-031 1.3684e-038";
      fogVolume2 = "-1 1.07208e-014 8.756e-014";
      fogVolume3 = "-1 5.1012e-010 2.05098e-008";
      materialList = "~/data/skies/CrashingCourseSky/List.dml";
      windVelocity = "1 0 0";
      windEffectPrecipitation = "0";
      noRenderBans = "1";
      fogVolumeColor1 = "128.000000 128.000000 128.000000 0.000000";
      fogVolumeColor2 = "128.000000 128.000000 128.000000 0.000004";
      fogVolumeColor3 = "128.000000 128.000000 128.000000 14435505.000000";
   };
   new Sun() {
      direction = "0.5773503 0.5773503 -0.5773503";
      color = "10.000000 0.500000 0.000000 1.000000";
      ambient = "0.200000 0.100000 0.000000 1.000000";
   };
   new StaticShape(StartPoint) {
      position = "0 -4 0.5";
      rotation = "1 0 0 0";
      scale = "1 1 1";
      dataBlock = "StartPad";
   };
   new StaticShape(EndPoint) {
      position = "2 -6 9";
      rotation = "0 0 1 180";
      scale = "1 1 1";
      dataBlock = "EndPad";
   };
   new InteriorInstance() {
      position = "0 0 0";
      rotation = "1 0 0 0";
      scale = "1 1 1";
      interiorFile = "~/data/interiors/WeatherWonders/CrashCourse.dif";
      showTerrainInside = "0";
   };
   new Trigger(Bounds) {
      position = "-18 -13 -0";
      rotation = "1 0 0 0";
      scale = "30 30 30";
      dataBlock = "InBoundsTrigger";
      polyhedron = "0.0000000 0.0000000 0.0000000 1.0000000 0.0000000 0.0000000 0.0000000 1.0000000 0.0000000 0.0000000 0.0000000 1.0000000";
   };
   new InteriorInstance() {
      position = "-6 -4.5 5.5";
      rotation = "1 0 0 0";
      scale = "1 1 1";
      interiorFile = "~/data/interiors/WeatherWonders/CrashCourse-TrimBlock.dif";
      showTerrainInside = "0";
   };
   new InteriorInstance() {
      position = "-12 4.5 2.5";
      rotation = "1 0 0 0";
      scale = "1 1 1";
      interiorFile = "~/data/interiors/WeatherWonders/CrashCourse-TrimBlock.dif";
      showTerrainInside = "0";
   };
   new InteriorInstance() {
      position = "-9 8 2.5";
      rotation = "0 0 1 89.99998";
      scale = "1 1 1";
      interiorFile = "~/data/interiors/WeatherWonders/CrashCourse-TrimBlock.dif";
      showTerrainInside = "0";
   };
   new InteriorInstance() {
      position = "-8.5 2.000001 3.5";
      rotation = "0 0 1 89.99998";
      scale = "1 1 1";
      interiorFile = "~/data/interiors/WeatherWonders/CrashCourse-TrimBlock.dif";
      showTerrainInside = "0";
   };
   new Item() {
      position = "-8.256378 2.156098 7.919898";
      rotation = "1 0 0 0";
      scale = "0.1 0.1 0.1";
      dataBlock = "easterEgg";
      collideable = "0";
      static = "1";
      rotate = "1";
   };
   new AudioProfile(MusicProfile) {
      fileName = "~/data/sound/music/Pianoforte.ogg";
      description = "AudioMusic";
      preload = "0";
   };
};
//--- OBJECT WRITE END ---
