//--- OBJECT WRITE BEGIN ---
new SimGroup(MissionGroup) {

   new ScriptObject(MissionInfo) {
         Time = "60000";
         alarmStartTime = "-100";
         artist = "A-Game";
         customRadarRule = "0";
         desc = "Earn points by hitting marble dummies!";
         game = "Platinum";
         gameMode = "mega";
         level = "1000";
         mega = "1";
         music = "The Race.ogg";
         name = "Wrecking Ball";
         radar = "1";
         type = "Custom";
         platinumScore = "250";
         ultimateScore = "325";
         generalHint = "Hit the marbles.";
         trivia = "The topic of marble collisions came up in Connie's server, and I made this collision script and a small proof of concept MMW level.";
   };
   new MissionArea(MissionArea) {
      area = "-360 -648 720 1296";
      flightCeiling = "300";
      flightCeilingRange = "20";
         locked = "true";
   };
   new Sky(Sky) {
      position = "0 0 0";
      rotation = "1 0 0 0";
      scale = "1 1 1";
      cloudHeightPer[0] = "0";
      cloudHeightPer[1] = "0";
      cloudHeightPer[2] = "0";
      cloudSpeed1 = "0.0001";
      cloudSpeed2 = "0.0002";
      cloudSpeed3 = "0.0003";
      visibleDistance = "10050";
      useSkyTextures = "1";
      renderBottomTexture = "1";
      SkySolidColor = "0.600000 0.600000 0.600000 1.000000";
      fogDistance = "300";
      fogColor = "0.600000 0.600000 0.600000 1.000000";
      fogVolume1 = "-1 7.45949e-031 1.3684e-038";
      fogVolume2 = "-1 1.07208e-014 8.756e-014";
      fogVolume3 = "-1 5.1012e-010 2.05098e-008";
      materialList = "~/data/skies/Beginner/Beginner_Sky.dml";
      windVelocity = "1 0 0";
      windEffectPrecipitation = "0";
      noRenderBans = "1";
      fogVolumeColor1 = "128.000000 128.000000 128.000000 0.000000";
      fogVolumeColor2 = "128.000000 128.000000 128.000000 0.000004";
      fogVolumeColor3 = "128.000000 128.000000 128.000000 14435505.000000";
   };
   new Sun() {
      direction = "0.638261 0.459006 -0.61801";
      color = "1.400000 1.200000 0.400000 1.000000";
      ambient = "0.300000 0.300000 0.400000 1.000000";
   };
   new SimGroup(PathNodeGroup) {

      new StaticShape(CameraPath1) {
         position = "19.0241 7.06656 9.97238";
         rotation = "0.386129 0.385205 -0.838165 99.9276";
         scale = "1 1 1";
         dataBlock = "PathNode";
            FinalRotOffset = "1 0 0 0";
            RotationMultiplier = "1";
            Smooth = "0";
            SmoothEnd = "0";
            SmoothStart = "0";
            Spline = "0";
            bezier = "0";
            branchNodes = " ";
            delay = "0";
            nextNode = "CameraPath1";
            placed = "1";
            reverseRotation = "0";
            speed = "0";
            timeToNext = "3000";
            usePosition = "1";
            useRotation = "1";
            useScale = "0";
      };
   };
   new InteriorInstance() {
      position = "0 0 0";
      rotation = "1 0 0 0";
      scale = "1 1 1";
      interiorFile = "~/data/multiplayer/interiors/custom/wreckingball.dif";
      showTerrainInside = "0";
   };   
   new StaticShape(SkySphere) {
      position = "0 0 0";
      rotation = "1 0 0 0";
      scale = "10000 10000 10000";
      dataBlock = "clear";
   };
   new StaticShape(StartPoint) {
      position = "15 7 1.00225";
      rotation = "0 0 -1 90.0002";
      scale = "1 1 1";
      dataBlock = "StartPad";
   };
   new Marble(MarbleDummy) {
      position = "7 7 1.18975";
      rotation = "1 0 0 0";
      scale = "1 1 1";
      dataBlock = "DefaultMarble";
      Controllable = "0";
         client = "1";
         powerUpData = "0";
   };
   new Marble(MarbleDummy) {
      position = "7 9 1.18975";
      rotation = "1 0 0 0";
      scale = "1 1 1";
      dataBlock = "DefaultMarble";
      Controllable = "0";
         client = "1";
         powerUpData = "0";
   };
   new Marble(MarbleDummy) {
      position = "7 11 1.18975";
      rotation = "1 0 0 0";
      scale = "1 1 1";
      dataBlock = "DefaultMarble";
      Controllable = "0";
         client = "1";
         powerUpData = "0";
   };
   new Marble(MarbleDummy) {
      position = "7 3 1.18975";
      rotation = "1 0 0 0";
      scale = "1 1 1";
      dataBlock = "DefaultMarble";
      Controllable = "0";
         client = "1";
         powerUpData = "0";
   };
   new Marble(MarbleDummy) {
      position = "7 5 1.18975";
      rotation = "1 0 0 0";
      scale = "1 1 1";
      dataBlock = "DefaultMarble";
      Controllable = "0";
         client = "1";
         powerUpData = "0";
   };
   new Marble(MarbleDummy) {
      position = "10 6 1.18975";
      rotation = "1 0 0 0";
      scale = "1 1 1";
      dataBlock = "DefaultMarble";
      Controllable = "0";
         client = "1";
         powerUpData = "0";
   };
   new Marble(MarbleDummy) {
      position = "5 9 1.18975";
      rotation = "1 0 0 0";
      scale = "1 1 1";
      dataBlock = "DefaultMarble";
      Controllable = "0";
         client = "1";
         powerUpData = "0";
   };
   new Marble(MarbleDummy) {
      position = "5 7 1.18975";
      rotation = "1 0 0 0";
      scale = "1 1 1";
      dataBlock = "DefaultMarble";
      Controllable = "0";
         client = "1";
         powerUpData = "0";
   };
   new Marble(MarbleDummy) {
      position = "5 5 1.18975";
      rotation = "1 0 0 0";
      scale = "1 1 1";
      dataBlock = "DefaultMarble";
      Controllable = "0";
         client = "1";
         powerUpData = "0";
   };
   new Marble(MarbleDummy) {
      position = "10 8 1.18975";
      rotation = "1 0 0 0";
      scale = "1 1 1";
      dataBlock = "DefaultMarble";
      Controllable = "0";
         client = "1";
         powerUpData = "0";
   };
   new Marble(MarbleDummy) {
      position = "6 6 1.18975";
      rotation = "1 0 0 0";
      scale = "1 1 1";
      dataBlock = "DefaultMarble";
      Controllable = "0";
         client = "1";
         powerUpData = "0";
   };
   new Marble(MarbleDummy) {
      position = "8 4 1.18975";
      rotation = "1 0 0 0";
      scale = "1 1 1";
      dataBlock = "DefaultMarble";
      Controllable = "0";
         client = "1";
         powerUpData = "0";
   };
   new Marble(MarbleDummy) {
      position = "3 7 1.18975";
      rotation = "1 0 0 0";
      scale = "1 1 1";
      dataBlock = "DefaultMarble";
      Controllable = "0";
         client = "1";
         powerUpData = "0";
   };
   new Marble(MarbleDummy) {
      position = "8 10 1.18975";
      rotation = "1 0 0 0";
      scale = "1 1 1";
      dataBlock = "DefaultMarble";
      Controllable = "0";
         client = "1";
         powerUpData = "0";
   };
   new Marble(MarbleDummy) {
      position = "6 8 1.18975";
      rotation = "1 0 0 0";
      scale = "1 1 1";
      dataBlock = "DefaultMarble";
      Controllable = "0";
         client = "1";
         powerUpData = "0";
   };
   new Marble(MarbleDummy) {
      position = "4 8 1.18975";
      rotation = "1 0 0 0";
      scale = "1 1 1";
      dataBlock = "DefaultMarble";
      Controllable = "0";
         client = "1";
         powerUpData = "0";
   };
   new Marble(MarbleDummy) {
      position = "9 5 1.18975";
      rotation = "1 0 0 0";
      scale = "1 1 1";
      dataBlock = "DefaultMarble";
      Controllable = "0";
         client = "1";
         powerUpData = "0";
   };
   new Marble(MarbleDummy) {
      position = "9 7 1.18975";
      rotation = "1 0 0 0";
      scale = "1 1 1";
      dataBlock = "DefaultMarble";
      Controllable = "0";
         client = "1";
         powerUpData = "0";
   };
   new Marble(MarbleDummy) {
      position = "9 9 1.18975";
      rotation = "1 0 0 0";
      scale = "1 1 1";
      dataBlock = "DefaultMarble";
      Controllable = "0";
         client = "1";
         powerUpData = "0";
   };
   new Marble(MarbleDummy) {
      position = "4 6 1.18975";
      rotation = "1 0 0 0";
      scale = "1 1 1";
      dataBlock = "DefaultMarble";
      Controllable = "0";
         client = "1";
         powerUpData = "0";
   };
   new Marble(MarbleDummy) {
      position = "8 6 1.18975";
      rotation = "1 0 0 0";
      scale = "1 1 1";
      dataBlock = "DefaultMarble";
      Controllable = "0";
         client = "1";
         powerUpData = "0";
   };
   new Marble(MarbleDummy) {
      position = "6 4 1.18975";
      rotation = "1 0 0 0";
      scale = "1 1 1";
      dataBlock = "DefaultMarble";
      Controllable = "0";
         client = "1";
         powerUpData = "0";
   };
   new Marble(MarbleDummy) {
      position = "11 7 1.18975";
      rotation = "1 0 0 0";
      scale = "1 1 1";
      dataBlock = "DefaultMarble";
      Controllable = "0";
         client = "1";
         powerUpData = "0";
   };
   new Marble(MarbleDummy) {
      position = "6 10 1.18975";
      rotation = "1 0 0 0";
      scale = "1 1 1";
      dataBlock = "DefaultMarble";
      Controllable = "0";
         client = "1";
         powerUpData = "0";
   };
   new Marble(MarbleDummy) {
      position = "8 8 1.18975";
      rotation = "1 0 0 0";
      scale = "1 1 1";
      dataBlock = "DefaultMarble";
      Controllable = "0";
         client = "1";
         powerUpData = "0";
   };
};
//--- OBJECT WRITE END ---

if (!isObject(MarbleDummyGroup))
   new SimGroup(MarbleDummyGroup);

// function createDummy(%pos) {
//    new Marble(MarbleDummy) {
//       dataBlock = "DefaultMarble";
//       controllable = 0;
//       position = %pos;
//    };
//    MarbleDummy.setSync("FindDummyMarble");
// }

function reanimateDummies() {
   %count = MissionGroup.getCount();
   for (%i = 0; %i < %count; %i ++) {
      %obj = MissionGroup.getObject(%i);
      if (%obj.getName() $= "MarbleDummy" && !MarbleDummyGroup.isMember(%obj)) {
         %obj.setSync("FindDummyMarble");
      }
   }
}

function FindDummyMarble(%marble) {
   MarbleDummyGroup.onNextFrame(add, %marble);
}

function clearDummies() {
   while (isObject(MarbleDummy))
      MarbleDummy.delete();
}

function Marble::isMegaMarble(%this) {
   if (!isObject(%this.client))
      return false;
   return %this.client.isMegaMarble();
}

function Marble::getTeam(%this) {
   if (!isObject(%this.client))
      return 0;
   if (!$MP::TeamMode)
      return 0;
   return %this.client.team.getId();
}

function serverCbOnMissionReset() {
   %count = MissionGroup.getCount();
   for (%i = 0; %i < %count; %i ++) {
      %obj = MissionGroup.getObject(%i);
      if (%obj.getName() $= "MarbleDummy")
         %obj.inspectPostApply();
   }
}

function clientCbOnFrameAdvance(%timeDelta) {
   if (isObject($MP::MyMarble) && !MarbleDummyGroup.isMember($MP::MyMarble))
      MarbleDummyGroup.add($MP::MyMarble);

   %nonMegaCollisions = true; // Mode::callback("enableMarbleCollisions", false) || $MPPref::Server::MarbleCollisions || MissionInfo.MarbleCollisions;
   %count = MarbleDummyGroup.getCount();
   for (%i = 0; %i < %count; %i ++) {
      %dummy1 = MarbleDummyGroup.getObject(%i);

      for (%j = 0; %j < %count; %j ++) {
         if (%j == %i)
            continue;
         %dummy2 = MarbleDummyGroup.getObject(%j);

         %distLen = VectorDist(%dummy1.getPosition(), %dummy2.getPosition());
         if (%distLen - %dummy1.getCollisionRadius() - %dummy2.getCollisionRadius() > 0) {
            if (%dummy1.marbleCollision[%dummy2])
               %dummy1.marbleCollision[%dummy2] = false;
            if (%dummy2.marbleCollision[%dummy1])
               %dummy2.marbleCollision[%dummy1] = false;
            continue;
         }

         if (%dummy1.marbleCollision[%dummy2] || %dummy2.marbleCollision[%dummy1])
            continue;

         %team1 = %dummy1.getTeam();
         %team2 = %dummy2.getTeam();

         //People on the same team cannot collide with each other
         if (%team1 != 0 && %team2 != 0 && %team1 == %team2)
            continue;

         %mega1 = %dummy1.isMegaMarble();
         %mega2 = %dummy2.isMegaMarble();

         //Don't apply collisions if no one has a mega marble, unless the mode requires them
         if (!%nonMegaCollisions && !%mega1 && !%mega2)
            continue;

         //The mega marble wins
         if (!%mega1 && %mega2)
            continue;

         %velocity1 = %dummy1.getVelocity();
         %velocity2 = %dummy2.getVelocity();

         //The faster player wins
         if (%mega1 == %mega2 && VectorLen(%velocity1) < VectorLen(%velocity2))
            continue;

         %normal = VectorScale(VectorSub(%dummy1.getPosition(), %dummy2.getPosition()), 1 / %distLen);
         %sVel = VectorSub(%velocity1, %velocity2);
         %surfaceDot = VectorDot(%normal, %sVel);
         if (%surfaceDot > -0.001) 
            continue;

         %surfaceVel = VectorScale(%normal, %surfaceDot);
         %restitution = max(%dummy1.getDatablock().bounceRestitution, %dummy2.getDatablock().bounceRestitution);

         //%velocityAdd1 = VectorScale(%surfaceVel, -%restitution * 2); //Elastic collisions
         %velocityAdd1 = VectorScale(%surfaceVel, -(1 + %restitution)); //Inelastic collisions similar to MBU
         %velocityAdd2 = VectorScale(%velocityAdd1, -1);

         //Mega Marble collision increase
         if (%mega1 && !%mega2) {
            %velocityAdd2 = VectorScale(%velocityAdd2, 4); // VectorScale(%velocityAdd2, $MP::Collision::MegaMultiplier);
            %velocityAdd1 = VectorScale(%velocityAdd1, 0.75); // VectorScale(%velocityAdd1, $MP::Collision::MegaReduction);
         }

         %velocity1 = VectorAdd(%velocity1, %velocityAdd1);
         %velocity2 = VectorAdd(%velocity1, %velocityAdd2);

         %velocity1 = VectorNanCheck(%velocity1, "0 0 0");
         %velocity2 = VectorNanCheck(%velocity2, "0 0 0");

         %dummy1.marbleCollision[%dummy2] = true;
         %dummy2.marbleCollision[%dummy1] = true; 

         %dummy1.setVelocity(%velocity1);
         %dummy2.setVelocity(%velocity2);

         //Play the sound...
         %sound = eval ("return" SPC %dummy1.getDatablock() @ ".bounce" @ getRandom(1, 4) @ ";");
         %volume = 1;
         %oldVolume = %sound.description.volume;
         %pos = %dummy1.getWorldBoxCenter();
         //Engine uses 12 and 2.5
         if (-%surfaceDot < 12)
            %volume = (-%surfaceDot - 2.5) / (12 - 2.5);
         %sound.description.volume = %volume;
         alxPlay(%sound, getWord(%pos, 0), getWord(%pos, 1), getWord(%pos, 2));
         %sound.description.volume = %oldVolume;

         %sound2 = eval ("return" SPC %dummy2.getDatablock() @ ".bounce" @ getRandom(1, 4) @ ";");
         %volume2 = 1;
         %oldVolume2 = %sound2.description.volume;
         %pos2 = %dummy2.getWorldBoxCenter();
         //Engine uses 12 and 2.5
         if (-%surfaceDot < 12)
            %volume2 = (-%surfaceDot - 2.5) / (12 - 2.5);
         %sound2.description.volume = %volume2;
         alxPlay(%sound2, getWord(%pos2, 0), getWord(%pos2, 1), getWord(%pos2, 2));
         %sound2.description.volume = %oldVolume2;

         //Only allow points if the game has started
         if ($Game::State $= "Go") {
            Mode::callback("onCollision", "", new ScriptObject() {
               client1 = %dummy1;
               client2 = %dummy2;
               affect1 = %velocity1;
               affect2 = %velocity2;
               _delete = true;
            });
         }
      }
   }
}

package MMWFixes {
   function ClientMode_mega::shouldUpdateGems(%this) {
      //Copied from hunt.cs
      PG_GemCounter.setVisible(false);
      PG_HuntCounter.setVisible(true);

      %count = PlayGui.gemCount;
      %max = PlayGui.maxGems;

      %one = %count % 10;
      %ten = ((%count - %one) / 10) % 10;
      %hundred = ((%count - %one - (%ten * 10)) / 100) % 10;
      %thousand = ((%count - %one - (%ten * 10) - (%hundred * 100)) / 1000) % 10;

      %color = ($Server::ServerType $= "Multiplayer" && PlayGui.gemGreen) ? $TimeColor["stopped"] : $TimeColor["normal"];

      updatePredictor();

      HuntGemsFoundOne.setVisible(true);
      HuntGemsFoundTen.setVisible(true);
      HuntGemsFoundHundred.setVisible(true);
      HuntGemsFoundThousand.setVisible(true);

      if (%count < 10) {
         HuntGemsFoundTen.setVisible(false);
         HuntGemsFoundHundred.setVisible(false);
         HuntGemsFoundThousand.setVisible(false);

         HuntGemsFoundOne.setNumberColor(%one, %color);
      } else if (%count < 100) {
         HuntGemsFoundHundred.setVisible(false);
         HuntGemsFoundThousand.setVisible(false);

         HuntGemsFoundOne.setNumberColor(%one, %color);
         HuntGemsFoundTen.setNumberColor(%ten, %color);
      } else if (%count < 1000) {
         HuntGemsFoundThousand.setVisible(false);

         HuntGemsFoundOne.setNumberColor(%one, %color);
         HuntGemsFoundTen.setNumberColor(%ten, %color);
         HuntGemsFoundHundred.setNumberColor(%hundred, %color);
      } else {
         HuntGemsFoundOne.setNumberColor(%one, %color);
         HuntGemsFoundTen.setNumberColor(%ten, %color);
         HuntGemsFoundHundred.setNumberColor(%hundred, %color);
         HuntGemsFoundThousand.setNumberColor(%thousand, %color);
      }
      return false;
   }

   function Mode_mega::onCollision(%this, %object) {
      if ($MP::Teammode && isObject(%object.client1.getTeam()) && isObject(%object.client2.getTeam()) && %object.client1.getTeam().getId() == %object.client2.getTeam().getId()) {
         return;
      }
      %pts = mFloor(mLog(VectorLen(%object.client1.getVelocity())) / mLog(2)) + 1;
      if (%pts > 0 && isObject(%object.client1.client)) {
         %object.client1.client.onFoundGem(%pts);
         %object.client1.client.displayGemMessage("+" @ %pts, "99ff99");
         %object.client1.client.gemsFound[5] ++;
         if (isObject(%object.client2.client))
            %object.client2.client.gemsFound[1] ++;
      }
   }
};

activatePackage(MMWFixes);
ClientMode_mega.hasCallback["shouldUpdateGems"] = true;

function serverCbOnMissionEnded() {
   deactivatePackage(MMWFixes);
   ClientMode_mega.hasCallback["shouldUpdateGems"] = false;
}

reanimateDummies();
